import requests
import time
import csv
from datetime import datetime

MSTR_BASE_URL = 'https://your-mstr-url/MicroStrategyLibrary/api'
USERNAME = 'your_username'
PASSWORD = 'your_password'
PROJECT_ID = 'your_project_id'  # Use project ID, not name
SUBSCRIPTION_ID = 'your_subscription_id'
CSV_FILE = 'mstr_subscription_job_log.csv'
POLL_INTERVAL = 5  # seconds

def authenticate():
    url = f"{MSTR_BASE_URL}/auth/login"
    headers = {'Accept': 'application/json', 'Content-Type': 'application/json'}
    payload = {'username': USERNAME, 'password': PASSWORD, 'loginMode': 1}
    r = requests.post(url, json=payload, headers=headers, verify=False)
    r.raise_for_status()
    auth_token = r.headers.get('X-MSTR-AuthToken')
    if not auth_token:
        raise Exception("Auth token not found in response headers!")
    return auth_token

def logout(auth_token):
    url = f"{MSTR_BASE_URL}/auth/logout"
    headers = {'X-MSTR-AuthToken': auth_token}
    try:
        requests.post(url, headers=headers, timeout=10, verify=False)
    except Exception:
        pass  # Not critical if logout fails

def get_subscription_details(auth_token, project_id, subscription_id):
    url = f"{MSTR_BASE_URL}/subscriptions/{subscription_id}"
    headers = {
        'X-MSTR-AuthToken': auth_token,
        'X-MSTR-ProjectID': project_id,
        'Accept': 'application/json'
    }
    r = requests.get(url, headers=headers, verify=False)
    r.raise_for_status()
    data = r.json()
    return data.get('name', 'Unknown Subscription'), data.get('id', subscription_id)

def trigger_subscription(auth_token, project_id, subscription_id):
    url = f"{MSTR_BASE_URL}/subscriptions/{subscription_id}/deliveries"
    headers = {
        'X-MSTR-AuthToken': auth_token,
        'X-MSTR-ProjectID': project_id,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }
    payload = {}
    r = requests.post(url, headers=headers, json=payload, verify=False)
    r.raise_for_status()
    data = r.json()
    if isinstance(data, dict) and 'id' in data:
        return data['id']
    elif isinstance(data, list) and len(data) > 0 and 'id' in data[0]:
        return data[0]['id']
    else:
        raise Exception("No job ID returned from subscription trigger")

def get_delivery_status(auth_token, project_id, delivery_id):
    url = f"{MSTR_BASE_URL}/deliveries/{delivery_id}"
    headers = {
        'X-MSTR-AuthToken': auth_token,
        'X-MSTR-ProjectID': project_id,
        'Accept': 'application/json'
    }
    r = requests.get(url, headers=headers, verify=False)
    r.raise_for_status()
    return r.json()

def poll_job_status(auth_token, project_id, delivery_id, poll_interval=5):
    while True:
        status_json = get_delivery_status(auth_token, project_id, delivery_id)
        status = status_json.get('status')
        message = status_json.get('message', '')
        error_msg = status_json.get('errorMsg', '')
        print(f"Current Status: {status}")
        if status in ['DELIVERY_SUCCEEDED', 'DELIVERY_FAILED', 'DELIVERY_CANCELED']:
            return status, message or error_msg
        time.sleep(poll_interval)

def append_to_csv(row, filename):
    file_exists = False
    try:
        with open(filename, 'r', newline='', encoding='utf-8') as f:
            file_exists = True
    except FileNotFoundError:
        pass
    with open(filename, 'a', newline='', encoding='utf-8') as f:
        writer = csv.DictWriter(f, fieldnames=row.keys())
        if not file_exists:
            writer.writeheader()
        writer.writerow(row)

def main():
    auth_token = None
    try:
        print("Authenticating...")
        auth_token = authenticate()
        print("Authenticated successfully.")
        # Get subscription details for name
        subscription_name, subscription_id = get_subscription_details(auth_token, PROJECT_ID, SUBSCRIPTION_ID)
        print(f"Subscription Name: {subscription_name} | Subscription ID: {subscription_id}")
        print("Triggering subscription...")
        delivery_id = trigger_subscription(auth_token, PROJECT_ID, SUBSCRIPTION_ID)
        print(f"Subscription triggered. Delivery (Job) ID: {delivery_id}")
        start_time = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
        final_status, fail_reason = poll_job_status(auth_token, PROJECT_ID, delivery_id, POLL_INTERVAL)
        end_time = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
        print(f"Final job status: {final_status}")
        if final_status == 'DELIVERY_SUCCEEDED':
            print("Subscription job completed successfully.")
        else:
            print(f"Subscription job ended with status: {final_status}")
        # Prepare row for CSV
        row = {
            'Timestamp': start_time,
            'Subscription Name': subscription_name,
            'Subscription ID': subscription_id,
            'Delivery (Job) ID': delivery_id,
            'Job Status': final_status,
            'Failure Reason': fail_reason,
            'End Time': end_time
        }
        append_to_csv(row, CSV_FILE)
        print(f"Job details appended to {CSV_FILE}")
    except requests.HTTPError as http_err:
        print(f"HTTP Error: {http_err.response.status_code} - {http_err.response.text}")
    except Exception as e:
        print(f"Error: {str(e)}")
    finally:
        if auth_token:
            logout(auth_token)
            print("Logged out of session.")

if __name__ == "__main__":
    requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)
    main()