#!/usr/bin/env python3
# coding: utf-8

import warnings
warnings.filterwarnings("ignore", message="Unverified HTTPS request")

import pandas as pd
from getpass import getpass
from mstrio.connection import Connection
from mstrio.projects import Project
from mstrio.distribution_services.subscription import Subscription

# -- Configuration
BASE_URL = "https://your-microstrategy-server/MicroStrategyLibrary/api"
USERNAME = "YOUR_USERNAME"
PASSWORD = getpass("Password: ")

conn = Connection(
    base_url=BASE_URL,
    username=USERNAME,
    password=PASSWORD,
    ssl_verify=False,
    login_mode=1
).login()

# -- Step 1: Retrieve subscriptions from all projects
rows = []
projects = Project.list_projects(connection=conn, to_dictionary=True)
for proj in projects:
    pid, pname = proj['id'], proj['name']
    conn.update_project(project_id=pid)
    subs = Subscription.list_subscriptions(
        connection=conn,
        project_id=pid,
        to_dictionary=True,
        last_run=True
    )
    for s in subs:
        sched = s['schedules'][0]
        rows.append({
            "project_id": pid,
            "project_name": pname,
            "subscription_id": s['id'],
            "object_id": s['contents'][0]['id'],
            "object_name": s['contents'][0]['name'],
            "object_type": s['contents'][0]['type'],
            "schedule_id": sched.get('id'),
            "schedule_name": sched.get('name'),
            "schedule_cron": sched.get('cron'),
            "delivery_mode": s['delivery']['mode'],
            "recipients": tuple(sorted(
                [r.get('email', r.get('name', '')) for r in s['recipients']]
            )),
            "date_created": s.get('dateCreated'),
            "last_run": s.get('lastRun')
        })

# -- Step 2: Build DataFrame and composite key
df = pd.DataFrame(rows)
df['dup_key'] = df.apply(lambda r: (
    r['project_id'], r['object_id'], r['delivery_mode'],
    r['schedule_name'] or r['schedule_cron'] or r['schedule_id'],
    r['recipients']
), axis=1)

# -- Step 3: Flag duplicate groups and extras
grouped = df.groupby('dup_key')
df['is_duplicate_group'] = df['dup_key'].map(lambda k: len(grouped.get_group(k)) > 1)
df['is_extra_copy'] = False

for key, grp in grouped:
    if len(grp) > 1:
        keep_id = grp.sort_values('date_created').iloc[0]['subscription_id']
        extras = grp[grp['subscription_id'] != keep_id]['subscription_id'].tolist()
        df.loc[df['subscription_id'].isin(extras), 'is_extra_copy'] = True

# -- Step 4: Summary & optional deletion
print(f"Duplicate groups found: {df['dup_key'][df['is_duplicate_group']].nunique()}")
print(f"Subscriptions flagged as extra copies: {df['is_extra_copy'].sum()}")

to_delete = df.loc[df['is_extra_copy'], 'subscription_id'].tolist()
if to_delete:
    inp = input(f"Delete {len(to_delete)} flagged subscriptions? (y/N): ")
    if inp.strip().lower() == 'y':
        Subscription.delete(connection=conn, subscriptions=to_delete, force=True)
        print("Deleted flagged subscriptions.")
    else:
        print("Deletion skipped.")

# -- Step 5: Export to CSV
out_file = "mstr_subscriptions_with_flags.csv"
df.to_csv(out_file, index=False)
print(f"Data exported to {out_file}")