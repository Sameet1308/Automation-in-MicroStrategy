import requests
import time
import urllib3

# ------------- CONFIGURATION -------------
^[SERVER_BASE = "https://<your-mstr-server>"]({"attribution":{"attributableIndex":"0-1"}})
^[API_BASE    = f"{SERVER_BASE}/MicroStrategyLibrary/api"]({"attribution":{"attributableIndex":"0-2"}})
^[API_V2      = f"{API_BASE}/v2"]({"attribution":{"attributableIndex":"0-3"}})
^[USERNAME    = "<your-username>"]({"attribution":{"attributableIndex":"0-4"}})
^[PASSWORD    = "<your-password>"]({"attribution":{"attributableIndex":"0-5"}})
^[PROJECT_ID  = "<your-project-id>"]({"attribution":{"attributableIndex":"0-6"}})
^[CUBE_ID     = "<your-cube-id>"]({"attribution":{"attributableIndex":"0-7"}})
^[POLL_DELAY  = 5           # seconds between checks]({"attribution":{"attributableIndex":"0-8"}})
^[TIMEOUT     = 2 * 3600    # poll up to 2 hours]({"attribution":{"attributableIndex":"0-9"}})

^[urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)]({"attribution":{"attributableIndex":"0-10"}})

# ------------- FUNCTIONS ---------------
def login():
    ^[resp = requests.post(]({"attribution":{"attributableIndex":"0-11"}})
        ^[f"{API_BASE}/auth/login",]({"attribution":{"attributableIndex":"0-12"}})
        ^[json={"username": USERNAME, "password": PASSWORD, "loginMode": 1},]({"attribution":{"attributableIndex":"0-13"}})
        verify=False
    )
    resp.raise_for_status()
    ^[return resp.headers["X-MSTR-AuthToken"], resp.cookies]({"attribution":{"attributableIndex":"0-14"}})

^[def logout(token, cookies):]({"attribution":{"attributableIndex":"0-15"}})
    requests.post(
        ^[f"{API_BASE}/auth/logout",]({"attribution":{"attributableIndex":"0-16"}})
        ^[headers={"X-MSTR-AuthToken": token},]({"attribution":{"attributableIndex":"0-17"}})
        cookies=cookies,
        verify=False
    )

^[def trigger_cube_refresh(token, cookies):]({"attribution":{"attributableIndex":"0-18"}})
    ^[resp = requests.post(]({"attribution":{"attributableIndex":"0-19"}})
        ^[f"{API_V2}/cubes/{CUBE_ID}",]({"attribution":{"attributableIndex":"0-20"}})
        headers={
            ^["X-MSTR-AuthToken": token,]({"attribution":{"attributableIndex":"0-21"}})
            ^["X-MSTR-ProjectID": PROJECT_ID,]({"attribution":{"attributableIndex":"0-22"}})
        },
        cookies=cookies,
        verify=False
    )
    resp.raise_for_status()
    ^[print("‚úÖ Cube refresh triggered (accepted).")]({"attribution":{"attributableIndex":"0-23"}})

^[def get_cube_status(token, cookies):]({"attribution":{"attributableIndex":"0-24"}})
    ^[resp = requests.head(]({"attribution":{"attributableIndex":"0-25"}})
        ^[f"{API_BASE}/cubes/{CUBE_ID}",]({"attribution":{"attributableIndex":"0-26"}})
        headers={
            ^["X-MSTR-AuthToken": token,]({"attribution":{"attributableIndex":"0-27"}})
            ^["X-MSTR-ProjectID": PROJECT_ID,]({"attribution":{"attributableIndex":"0-28"}})
        },
        cookies=cookies,
        verify=False
    )
    resp.raise_for_status()
    ^[return resp.headers.get("X-MSTR-CubeStatus")]({"attribution":{"attributableIndex":"0-29"}})

# -------------- MAIN LOGIC -------------
^[if __name__ == "__main__":]({"attribution":{"attributableIndex":"0-30"}})
    ^[token = cookies = None]({"attribution":{"attributableIndex":"0-31"}})
    ^[start_time = time.time()]({"attribution":{"attributableIndex":"0-32"}})

    try:
        token, cookies = login()
        print("üîì Successfully logged in.")

        trigger_cube_refresh(token, cookies)

        print(f"‚è≥ Polling cube status for up to {TIMEOUT/3600:.1f} hours...")
        while True:
            elapsed = time.time() - start_time
            status_header = get_cube_status(token, cookies)
            print(f"[{elapsed:.0f}s] Cube status: {status_header}")

            if not status_header:
                raise RuntimeError("No status header returned from HEAD request.")

            st = status_header.lower()
            if st in ("processed", "loaded", "available"):
                print("üéâ Cube refresh succeeded.")
                break

            if any(err in st for err in ("error", "dirty", "infodirty", "failed")):
                raise RuntimeError(f"‚ùå Cube refresh failed with status: {status_header}")

            if elapsed > TIMEOUT:
                raise TimeoutError("‚è± Timeout reached (2 hours) waiting for cube refresh.")

            time.sleep(POLL_DELAY)

    except Exception as e:
        print("‚ö†Ô∏è Error occurred:", e)

    finally:
        if token:
            try:
                logout(token, cookies)
                print("üîê Logged out and session ended.")
            except:
                print("‚ö†Ô∏è Logout may have failed.")