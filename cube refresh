import time
from mstrio.connection import Connection
from mstrio.api.cubes import cubes
from mstrio.project_objects.datasets.cube_cache import list_cube_caches, CubeCache

# ‚îÄ‚îÄ‚îÄ CONFIG ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BASE_URL = "https://your-mstr-server/MicroStrategyLibrary/api"
USERNAME = "your_user"
PASSWORD = "your_password"
PROJECT = "YourProject"
CUBE_ID = "your_cube_id"
POLL_DELAY = 5      # seconds
TIMEOUT = 3600      # seconds (1 hour)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def get_cache_id(conn):
    caches = list_cube_caches(connection=conn, cube_id=CUBE_ID)
    if not caches:
        raise ValueError(f"No cube cache found for cube ID {CUBE_ID}")
    cache = caches[0]
    print(f"üì¶ Using cache ID {cache.id} (state={cache.state['loadedState']})")
    return cache.id

def wait_for_refresh(conn):
    start_ts = time.time()
    refresh_started = False

    while True:
        elapsed = int(time.time() - start_ts)
        if elapsed > TIMEOUT:
            raise TimeoutError(f"Timeout after {elapsed}s: refresh did not complete.")

        resp = cubes.status(conn, cube_id=CUBE_ID, throw_error=True)
        code = int(resp.headers["X-MSTR-CubeStatus"])
        states = conn.show_status(code)  # e.g. ["LOADED", "ACTIVE", "LOAD_PENDING"]  [oai_citation:0‚Ä°www2.microstrategy.com](https://www2.microstrategy.com/producthelp/current/mstrio-py/mstrio.project_objects.datasets.html?utm_source=chatgpt.com) [oai_citation:1‚Ä°www2.microstrategy.com](https://www2.microstrategy.com/producthelp/Current/mstrio-py/sections/toc5.html?utm_source=chatgpt.com) [oai_citation:2‚Ä°github.com](https://github.com/MicroStrategy/mstrio-py/blob/master/code_snippets/cube_cache.py?utm_source=chatgpt.com)

        if "LOAD_PENDING" in states:
            if not refresh_started:
                print(f"[{elapsed}s] üöÄ Refresh execution started.")
            refresh_started = True

        elif "LOADED" in states and "ACTIVE" in states:
            if refresh_started:
                print(f"[{elapsed}s] ‚úÖ Refresh completed (states={states}).")
                return
            else:
                print(f"[{elapsed}s] ‚è≥ Refresh queued (still idle).")

        else:
            print(f"[{elapsed}s] ‚ùó Unexpected cube states: {states}")
            raise RuntimeError(f"Unexpected cube status flags: {states}")

        time.sleep(POLL_DELAY)

def confirm_with_cache(conn, cache_id):
    cache = CubeCache(connection=conn, id=cache_id)
    cache.fetch()
    ls = cache.state.get("loadedState")
    proc = cache.state.get("processing")
    print(f"üîç Cache monitor: loadedState={ls}, processing={proc}")
    if ls == "loaded" and not proc:
        print("üéâ Cube cache successfully loaded and idle.")
    else:
        print("‚ö†Ô∏è Cache not yet idle after refresh; state:", ls, proc)

def main():
    try:
        conn = Connection(BASE_URL, USERNAME, PASSWORD, project_name=PROJECT)
        print("‚úÖ Connected to MicroStrategy.")

        cache_id = get_cache_id(conn)

        cubes.publish(conn, CUBE_ID)
        print("üì§ Cube refresh triggered.")

        wait_for_refresh(conn)
        confirm_with_cache(conn, cache_id)

    except Exception as e:
        print("‚ùå ERROR:", e)
    finally:
        try:
            conn.close()
            print("üîí Logged out.")
        except:
            pass

if __name__ == "__main__":
    main()