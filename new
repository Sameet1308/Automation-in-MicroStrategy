# ============================================================================
# GET COMPLETE DOSSIER DEFINITION JSON
# ============================================================================

import requests
import urllib3
import warnings
import json

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
warnings.filterwarnings('ignore')

# ============================================================================
# CONFIGURATION
# ============================================================================

LIBRARY_URL = "https://your-server/MicroStrategyLibrary"  # CHANGE THIS
USERNAME = "your-username"                                  # CHANGE THIS
PASSWORD = "your-password"                                  # CHANGE THIS
PROJECT_ID = "your-project-id"                             # CHANGE THIS
DOSSIER_ID = "your-dossier-id"                            # CHANGE THIS

# Output file location
OUTPUT_FILE = "/dbfs/FileStore/dossier_definition_complete.json"

# ============================================================================
# FETCH COMPLETE DEFINITION
# ============================================================================

print("="*80)
print("FETCHING COMPLETE DOSSIER DEFINITION")
print("="*80)

session = requests.Session()
session.verify = False

try:
    # Step 1: Authenticate
    print(f"\n1. Authenticating as {USERNAME}...")
    auth_response = session.post(
        f"{LIBRARY_URL.rstrip('/')}/api/auth/login",
        json={"username": USERNAME, "password": PASSWORD},
        headers={"Content-Type": "application/json"}
    )
    auth_response.raise_for_status()
    auth_token = auth_response.headers.get('X-MSTR-AuthToken')
    print("   âœ“ Authenticated")
    
    # Step 2: Get dossier definition
    print(f"\n2. Fetching dossier definition...")
    print(f"   Dossier ID: {DOSSIER_ID}")
    print(f"   Project ID: {PROJECT_ID}")
    
    definition_response = session.get(
        f"{LIBRARY_URL.rstrip('/')}/api/v2/dossiers/{DOSSIER_ID}/definition",
        headers={
            "X-MSTR-AuthToken": auth_token,
            "X-MSTR-ProjectId": PROJECT_ID,
            "Accept": "application/json"
        }
    )
    definition_response.raise_for_status()
    
    # Get the complete JSON
    definition = definition_response.json()
    print("   âœ“ Definition retrieved")
    
    # Step 3: Save complete JSON to file
    print(f"\n3. Saving complete JSON to file...")
    with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
        json.dump(definition, f, indent=2, ensure_ascii=False)
    
    print(f"   âœ“ Saved to: {OUTPUT_FILE}")
    
    # Step 4: Display complete JSON
    print("\n" + "="*80)
    print("COMPLETE JSON DEFINITION")
    print("="*80)
    print("\n")
    
    # Print the entire JSON with pretty formatting
    complete_json = json.dumps(definition, indent=2, ensure_ascii=False)
    print(complete_json)
    
    # Step 5: Summary
    print("\n" + "="*80)
    print("SUMMARY")
    print("="*80)
    
    total_chars = len(complete_json)
    total_lines = len(complete_json.split('\n'))
    
    print(f"\nTotal Characters: {total_chars:,}")
    print(f"Total Lines: {total_lines:,}")
    print(f"\nFile saved to: {OUTPUT_FILE}")
    print(f"File size: {len(complete_json)} bytes")
    
    # Top-level structure
    print(f"\nTop-level keys in definition:")
    for key in definition.keys():
        if isinstance(definition[key], list):
            print(f"  â€¢ {key} (array, {len(definition[key])} items)")
        elif isinstance(definition[key], dict):
            print(f"  â€¢ {key} (object, {len(definition[key])} keys)")
        else:
            print(f"  â€¢ {key}: {definition[key]}")
    
    # Logout
    session.post(
        f"{LIBRARY_URL.rstrip('/')}/api/auth/logout",
        headers={"X-MSTR-AuthToken": auth_token},
        timeout=5
    )
    
    print("\n" + "="*80)
    print("COMPLETE!")
    print("="*80)
    print(f"\nðŸ’¾ Download the JSON file from:")
    print(f"   Databricks UI â†’ Data â†’ FileStore â†’ dossier_definition_complete.json")

except requests.exceptions.HTTPError as e:
    print(f"\nâœ— HTTP Error: {e}")
    print(f"   Status Code: {e.response.status_code}")
    try:
        error_detail = e.response.json()
        print(f"   Error Detail: {json.dumps(error_detail, indent=2)}")
    except:
        print(f"   Response: {e.response.text}")

except Exception as e:
    print(f"\nâœ— Error: {e}")
    import traceback
    traceback.print_exc()

print("\n" + "="*80)
