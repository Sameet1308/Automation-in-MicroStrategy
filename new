# ============================================================================
# DIAGNOSTIC SCRIPT - SEE WHAT THE API ACTUALLY RETURNS
# ============================================================================

import requests
import urllib3
import warnings
import json

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
warnings.filterwarnings('ignore')

# ============================================================================
# CONFIGURATION
# ============================================================================

LIBRARY_URL = "https://your-server/MicroStrategyLibrary"  # CHANGE THIS
USERNAME = "your-username"                                  # CHANGE THIS
PASSWORD = "your-password"                                  # CHANGE THIS
PROJECT_ID = "your-project-id"                             # CHANGE THIS
DOSSIER_ID = "your-dossier-id"                            # CHANGE THIS - Use a dossier with dashboard-level derived metrics

# ============================================================================
# GET THE RAW DEFINITION
# ============================================================================

print("="*80)
print("DOSSIER DEFINITION DIAGNOSTIC")
print("="*80)

session = requests.Session()
session.verify = False

try:
    # Authenticate
    print("\n1. Authenticating...")
    auth_response = session.post(
        f"{LIBRARY_URL}/api/auth/login",
        json={"username": USERNAME, "password": PASSWORD},
        headers={"Content-Type": "application/json"}
    )
    auth_response.raise_for_status()
    auth_token = auth_response.headers.get('X-MSTR-AuthToken')
    print("‚úì Authenticated")
    
    # Get dossier definition
    print(f"\n2. Fetching dossier definition for: {DOSSIER_ID}")
    definition_response = session.get(
        f"{LIBRARY_URL}/api/v2/dossiers/{DOSSIER_ID}/definition",
        headers={
            "X-MSTR-AuthToken": auth_token,
            "X-MSTR-ProjectId": PROJECT_ID
        }
    )
    definition_response.raise_for_status()
    definition = definition_response.json()
    print("‚úì Definition retrieved")
    
    # Save to file
    with open('/dbfs/FileStore/dossier_definition_raw.json', 'w') as f:
        json.dump(definition, f, indent=2)
    print("\n‚úì Saved to: /dbfs/FileStore/dossier_definition_raw.json")
    
    # Show structure
    print("\n" + "="*80)
    print("DOSSIER DEFINITION STRUCTURE")
    print("="*80)
    
    print(f"\nTop-level keys:")
    for key in definition.keys():
        print(f"  ‚Ä¢ {key}")
    
    print(f"\n\nDatasets:")
    if 'datasets' in definition:
        datasets = definition['datasets']
        print(f"  Count: {len(datasets)}")
        if datasets:
            print(f"  First dataset keys: {list(datasets[0].keys())}")
            if 'availableObjects' in datasets[0]:
                print(f"  Objects in first dataset: {len(datasets[0]['availableObjects'])}")
    
    print(f"\n\nChapters:")
    if 'chapters' in definition:
        chapters = definition['chapters']
        print(f"  Count: {len(chapters)}")
        if chapters:
            print(f"  First chapter keys: {list(chapters[0].keys())}")
            if 'pages' in chapters[0] and chapters[0]['pages']:
                print(f"  Pages in first chapter: {len(chapters[0]['pages'])}")
                if 'visualizations' in chapters[0]['pages'][0]:
                    vizs = chapters[0]['pages'][0]['visualizations']
                    print(f"  Visualizations in first page: {len(vizs)}")
                    if vizs:
                        print(f"  First visualization keys: {list(vizs[0].keys())}")
    else:
        print("  ‚ö†Ô∏è NO 'chapters' key found in definition!")
    
    print("\n" + "="*80)
    print("SAMPLE DEFINITION (First 100 lines)")
    print("="*80)
    
    definition_str = json.dumps(definition, indent=2)
    lines = definition_str.split('\n')[:100]
    print('\n'.join(lines))
    
    print("\n\nüí° Full JSON saved to: /dbfs/FileStore/dossier_definition_raw.json")
    print("   Download it from Databricks to see complete structure")

except Exception as e:
    print(f"\n‚úó Error: {e}")
    import traceback
    traceback.print_exc()

print("\n" + "="*80)
